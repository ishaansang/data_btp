import os, re
from os import path
from math import radians, cos, sin, asin, sqrt
import math
import numpy as np
from scipy.spatial.distance import euclidean
from fastdtw import fastdtw

def getfile(str):
	"""This code formats the raw input file into suitable data."""             
	arr = []
	file_path = os.path.relpath(str)
	# print filepath
	var = True
	with open(file_path) as fp:
		for line in fp:
			line = line.strip()
			line = line.replace(' ',',')
			if var is False:
				arr.append(line.split(','))
			var = False

	return arr

def haversine(lon1, lat1, lon2, lat2):
    """Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)."""
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula 
    dlon = lon2 - lon1 
    dlat = lat2 - lat1 
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a)) 
    # Radius of earth in kilometers is 6371
    km = 6371* c
    return km

def samepath(paths,ii,jj):
	"""Given the paths directory and two indices this code checks whether 
	the data belongs to the same path or not using gps coordinates."""
	i=0
	j=0
	ctr = 0
	arr = getfile(paths[ii])
	brr = getfile(paths[jj])
	print (ii,jj)
	while i < len(arr):
	    j = 0
	    id = -1
	    m = 1000000000
	    while(j < len(brr)):
	        if(haversine(float(arr[i][1]),float(arr[i][0]),float(brr[j][1]),float(brr[j][0])) < m):
	            m = haversine(float(arr[i][1]),float(arr[i][0]),float(brr[j][1]),float(brr[j][0]))
	            id = j
	        j += 1
	    i += 1
	    if(m < 0.005):
	        ctr += 1

	match = float(ctr)/len(brr)
	
	if match > 0.5:
		return 1

	return 0

def getdtw(paths,graphs,id):
	# print os.getcwd()
	i = 0
	dtw = []
	while i < len(graphs):
		
		arr = []
		file_path = paths[graphs[i]]
		var = True
		with open(file_path) as fp:
			for line in fp:
				line = line.strip()
				line = line.replace(' ',',')
				line = line.split(',')
				if var is False:
					line = map(float,line[0:2])
					arr.append(line)
				var = False

		j = 0
		cur= []
		print (graphs[i])
		while j < len(graphs):
			brr = []
			file_path = paths[graphs[j]]
			var = True
			print (graphs[j])
			with open(file_path) as fp:
				for line in fp:
					line = line.strip()
					line = line.split(',')
					if var is False:
						line = map(float,line[0:2])
						brr.append(line)	
					var = False

			x = np.array(arr)
			y = np.array(brr)
			distance, path = fastdtw(x, y, dist=euclidean)
			cur.append(distance)
			j += 1
		dtw.append(cur)
		i+=1
	f = open("dtw_data"+str(id)+".txt","w+")
	for rows in dtw:
		for x in rows:
			f.write(str(x) + ' ')
		f.write('\n')
	f.close()

"""Start of the main"""
final_dir = []
""" Storing all the file directory."""
for subdir, dirs, files in os.walk(os.getcwd()):
    for file in files:
        #print os.path.join(subdir, file)
        filepath = subdir + os.sep + file
        if 'LACC' in filepath :
            # print (subdir[-19:-1])
            final_dir.append(filepath)

# print len(arr)


# i = 0
# j = 0
# """storing path directory of the files that have more than 100 gps coordinates in them."""
# final_dir = []
# while i < len(arr):
# 	file1 = getfile(arr[i])
# 	if len(file1) < 100:
# 		i = i + 1
# 		pass
# 	final_dir.append(arr[i])
# 	i = i + 1
# 	pass

# print (len(final_dir))
# i = 0
# j = 0

# print arr
# """Checks for all pairs to see if they are the same paths or not
# Can be optimised to linear time but FTW."""
# f1=open('final_pathdir.txt', 'w+')
# graph = []
# while i < len(final_dir):
# 	j = i +1
# 	cur = []
# 	while j < len(final_dir):
# 		if samepath(final_dir,i,j):
# 			print (final_dir[i][-19:-1],final_dir[j][-19:-1],file = f1)
# 			cur.append(j)
# 		j = j + 1
# 	graph.append(cur)
# 	i = i + 1

# f1.close()

# print (graph)
# 			# 

# [[1, 6, 7, 12, 13, 14, 15, 16, 18, 19, 20, 21], 
# [6, 7, 12, 13, 14, 15, 16, 18, 19, 20, 21], 
# [3], [], [], [11, 22, 23], 
# [7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21,22, 23], 
# [11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23], 
# [9], [], [], [22, 23], 
# [13, 14, 15, 16, 18, 19], 
# [14, 15, 16, 18, 19], 
# [15, 16, 18, 19, 20, 21], 
# [16, 18, 19, 20, 21], 
# [], [], [19, 20, 21], 
# [20, 21], [21], 
# [], [23], []]

graph = []
graph.append((0,1,6,7,12,13,14,15,16,18,19,20,21)) 
graph.append((2,3)) 
graph.append((4,))
graph.append((5,11, 22, 23))
graph.append((8,9))
graph.append((10,))
graph.append((17,))



for x in graph:
	print x

ii=0
for rows in graph:
	getdtw(final_dir,rows,ii)
	ii+=1
